#include <iostream>
#include <string.h>
using namespace std;

class MyStack {
	protected:
		int * arr;
		int n;
		int size;
		
	public:
		MyStack() {
			cout << "Constructor OK" << "\n";
			n = 0;
			size = 4;
			arr = new int[size];
		}
		
		void printAll() {
			cout << "\n";
			for(int i = 0; i < n; i++) {
				cout << arr[i] << "  ";
			}
			cout << "\n";
		}
		
		void grow() {
			size = size * 2;
			int * b;
			b = new int[size];
			for(int i = 0; i < n; i++) {
				b[i] = arr[i];
			}
			delete [] arr;
			arr = b;
			cout << "Grow" << "\n";
		}
		
		void addElement(int x) {
			arr[n] = x;
			n++;
			if(n == size) {
				grow();
			}
		}
};


class Mnog : public MyStack {
	public:
		bool isExist(int x) {
			for(int i = 0; i < n; i++) {
				if(arr[i] == x) {
					return true;
				}
			}
			return false;
		}
		
		void addToMnog(int w) {
			if(isExist(w) == false) {
				addElement(w);
			}
		}
};

class HashTable {
	protected:
		Mnog mass[5];
		
	public:
		void addToHashTable(int q) {
			int ost = q % 5;
			mass[ost].addToMnog(q);
		}
		
		void printAllElements() {
			for(int i = 0; i < 5; i++) {
				mass[i].printAll();
			}
		}
		
		bool isInHashTable(int y) {
			int ost = y % 5;
			bool ans = mass[ost].isExist(y);
			return ans;
		}
};


int main() {
	HashTable h;
	
	while(true) {
		int x;
		cin >> x;
		if(x != 0) {
			h.addToHashTable(x);
		} else {
			break;
		}
	}
	
	h.printAllElements();
	
	int p;
	cin >> p;
	if(h.isInHashTable(p) == true) {
		cout << "YES";
	} else {
		cout << "NO";
	}
	
	cout << "\n\n";
	
	return 0;
}










